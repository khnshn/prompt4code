import simpy
import random
from enum import Enum

class Status(Enum):
    IDLE = 0
    TEACHING = 1
    ON_A_BREAK = 2
    RESPONDING = 3

class Teacher:
    def __init__(self, name, env, teaching_duration, break_min, break_max, respond_rate):
        self.name = name
        self.env = env
        self.teaching_duration = teaching_duration
        self.break_min = break_min
        self.break_max = break_max
        self.respond_rate = respond_rate
        self.status = Status.IDLE

        self.response_counter = 0
        self.total_notifications = 0

        self.action = env.process(self.run())

    def run(self):
        while True:
            if self.status == Status.IDLE:
                yield self.env.timeout(self.teaching_duration)
                self.status = Status.ON_A_BREAK
                yield self.env.timeout(random.randint(self.break_min, self.break_max))
                self.status = Status.RESPONDING
                self.total_notifications += 1
                if random.random() < self.respond_rate:
                    self.response_counter += 1
                self.status = Status.IDLE
            else:
                yield self.env.timeout(1)

def teacher_generator(env, num_teachers, respond_rate):
    for i in range(num_teachers):
        teacher = Teacher("Teacher {}".format(i+1), env, 2, 4, 8, respond_rate)
        yield teacher

env = simpy.Environment()
num_teachers = 50
respond_rate = 0.8

teachers = list(teacher_generator(env, num_teachers, respond_rate))
env.run(until=24)

response_rate = sum(teacher.response_counter for teacher in teachers) / sum(teacher.total_notifications for teacher in teachers)
print(response_rate)
